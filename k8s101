Kubernetes Components :

Control plane(masternode)
-apiserver
-ETCD
-Scheduler
-Control Manager

Nodes(workernode)
-Kubelet
-Kube-proxy
-Container runtime

Control Plane Components (masternode)

1.Kube-apiserver
    Apiâ€™s controls application, kubernetes controls apis.
2.Etcd
    It is storage for kubernetes
3.Kube-scheduler
    Its a scheduler, which schedules everting in nodes
4.Kube-controller-manager
    Some types of these controllers are:
    Node controller: Responsible for noticing and responding when nodes go down.
    Job controller: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.
    EndpointSlice controller: Populates EndpointSlice objects (to provide a link between Services and Pods)

Node Components (workernode)
1.kubelet 
2.kube-proxy
3.Container runtime


Kubernetes Objects
1.pods
2.Replicaset
3.Services(clusterIP(internal expose intranet), Nodeport(public:port to expose), loadbalancer)
4.volumes
5.namespace
6.Config maps/Secrets
7.Statefull sets
8.Daemonsets

Kubernetes Objects:
    The Kubernetes Platform contains control over the resources related to Storage and Compute. These resources are regarded as Objects, and it contains 8 Key objects.

1. Pods: (to run single or multiple containers in a wrapper)

Being a higher-level abstraction grouping containerized component, it consists of one or more containers that can co-exist on the host system and share resources. With each Pod having a unique IP Address in a particular cluster, it allows the usage of ports without any conflicts.

2. Replica Sets: (number of pods to be run at a time)(duplicates)

At any time, it is needed to maintain a stable set of running replica Pods. This is maintained by Replica sets. Also, its purpose is to manage the availability of the required number of identical Pods.

3. Services: (to access the pods using url or IP Address) (to expose the application)

A Kubernetes service is defined by a set of pods that work together. These sets of pods are defined with a label selector. The service discovery can happen in two different modes, using environmental variables or Kubernetes DNS.

4. Volumes: (to store data of pods)

By default, ephemeral storage will be provided by the File Systems of Kubernetes. This form of storage will remove all the data stored in such containers when the Pod is restarted. The Kubernetes Volume will provide persistent storage such that the data exists for the whole lifetime of the Pod.

5. Name Spaces: (in general we can call as a folder)

The large number of resources managed by Kubernetes are separated into multiple non-overlapping sets. These sets are referred to as Namespaces. These are generally used when a large number of users exist in the form of multiple teams or projects.

6. ConfigMaps and Secrets: (1. passing variables to in text format is configmaps 2. passing variables in encrypted text is secrets)
     Some of the Configuration Data may contain confidential information which makes the storage and maintenance of configuration information a challenge. 
     ConfigMaps and Secrets are two mechanisms provided by Kubernetes that can deal with this problem. 
     Both methods permit changes in the configuration without application-build.

7. Stateful Sets: (running the pods with same name)(when pod restarted are deleted it will create pod with different name, to avoid that we have to create stateful sets)
     Stateless applications are easier to handle in terms of scaling. Because all it needs is to add up the number of Pods. 
     But for Stateful workloads, you need to maintain the states when the Pod is restarted, and the state may need to be redistributed for scaling. 
     The stateful sets provided by Kubernetes are used to run stateful Applications ensuring uniqueness and ordering of the instances of a Pod.

8. Daemon Sets: (it will create 1 pod in all nodes)
     Generally, Kubernetes Scheduler is responsible for deciding the location where Pods are run. 
     It is done by the algorithm. This mode of scheduling the Pods is implemented by the feature called Daemon Sets.
     The kubelet uses readiness probes to know when a container is ready to start accepting traffic






Kubernetes : 




single server clusters
kind 
tanzu kubernets


master slave k8s cluster
minikube
kops

